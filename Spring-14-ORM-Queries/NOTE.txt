Derive / JPQL / Native query

0. to use update/delete/insert you need to use @Modifying annotation for the method

    @Modifying
    @Transactional
    @Query("UPDATE Employee e SET e.email='bla' WHERE e.id = :id")
    void updateEmployeeJPQL(@Param("id") int id);


1. Derive - operates on JAVA objects

        List<Employee> findByHireDateBetween(LocalDate startDate, LocalDate endDate);

        Stream<Course> streamByCategory(String category);
            -- NOTE the function that calls stream must be @Transactional
2. JPQL

    @Query("SELECT e FROM Employee e WHERE e.firstName like ?1 ")
    List<Employee> getEmployeeFirstNameLike(String pattern);

    @Query(value = "SELECT * FROM employees  WHERE salary BETWEEN ?1 AND ?2 ORDER BY salary", nativeQuery = true)
    List<Employee> readEmployeeDetailBySalary(int salaryStart, int salaryEnd);

    @Query(value = "SELECT * FROM employees  WHERE salary BETWEEN :salaryStart AND :salaryEnd ORDER BY salary", nativeQuery = true)
    List<Employee> readEmployeeDetailBySalaryParam(@Param("salaryStart") int salaryStart, @Param("salaryEnd") int salaryEnd);

3. Native SQL


    @Query(value = "select * from courses where category = :category and rating > :rating",nativeQuery = true)
    List<Course> findByCategoryAndRatingGreaterThan(@Param("category") String category, @Param("rating") int rating);

    problem with LIKE %:parameter% - will cause error
        workaround LIKE concat('%', :parameter, '%')

4. Named queries

    4.1. store SQL in a file
        resources > META-INT > jpa-named-queries.properties
            <Entity>.<repository Interface functionName> = <SQL statment>

    4.2. Use SQL stored in the property file
        Repository Inetface:
            List<object> [functionName]

    4.3. Alternative way to declare NamedQuery is on to of the class definition

            @NamedQuery(name = "Department.findMyDepartment", query = "SELECT d FROM Department d WHERE d.division=?1")
            public class Department